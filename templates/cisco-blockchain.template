{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "BlockChain Template",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCID",
            "PublicSubnet1ID",
            "PublicSubnet2ID",
            "RemoteAccessCIDR"
          ]
        },
        {
          "Label": {
            "default": "BlockChain EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName",
            "BlockChainAccessCIDR",
            "InstanceType"
          ]
        },
        {
          "Label": {
            "default": "AWS Quick Start Configuration"
          },
          "Parameters": [
            "QSS3BucketName",
            "QSS3KeyPrefix"
          ]
        }
      ],
      "ParameterLabels": {
        "KeyPairName": {
          "default": "Key Pair Name"
        },
        "PublicSubnet1ID": {
          "default": "Public Subnet 1 ID"
        },
        "QSS3BucketName": {
          "default": "Quick Start S3 Bucket Name"
        },
        "QSS3KeyPrefix": {
          "default": "Quick Start S3 Key Prefix"
        },
        "RemoteAccessCIDR": {
          "default": "Allowed SSH Access CIDR"
        },
        "BlockChainAccessCIDR": {
          "default": "Allowed Application Access CIDR"
        },
        "VPCID": {
          "default": "VPC ID"
        }
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type for the bastion instances",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Enter a Public/private key pair. If you do not have one in this region, please create it before continuing",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "PublicSubnet1ID": {
      "Description": "ID of the public subnet 1 that you want to provision the first bastion into (e.g., subnet-a0246dcd)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2ID": {
      "Description": "ID of the public subnet 2 you want to provision the second bastion into (e.g., subnet-e3246d8e)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Default": "aws-quickstart",
      "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Type": "String"
    },
    "QSS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "quickstart-cisco-blockchainplatform/",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Type": "String"
    },
    "RemoteAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "Allowed CIDR block for external SSH access",
      "Type": "String"
    },
    "BlockChainAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "Allowed CIDR block for external application access",
      "Type": "String"
    },
    "VPCID": {
      "Description": "ID of the VPC (e.g., vpc-0343606e)",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "AMI": {
        "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405"
      },
      "ap-northeast-1": {
        "US1604HVM": "ami-60a4b21c"
      },
      "ap-northeast-2": {
        "US1604HVM": "ami-633d920d"
      },
      "ap-south-1": {
        "US1604HVM": "ami-dba580b4"
      },
      "ap-southeast-1": {
        "US1604HVM": "ami-82c9ecfe"
      },
      "ap-southeast-2": {
        "US1604HVM": "ami-2b12dc49"
      },
      "ca-central-1": {
        "US1604HVM": "ami-9d7afcf9"
      },
      "eu-central-1": {
        "US1604HVM": "ami-cd491726"
      },
      "eu-west-1": {
        "US1604HVM": "ami-74e6b80d"
      },
      "eu-west-2": {
        "US1604HVM": "ami-506e8f37"
      },
      "sa-east-1": {
        "US1604HVM": "ami-5782d43b"
      },
      "us-east-1": {
        "US1604HVM": "ami-6dfe5010"
      },
      "us-east-2": {
        "US1604HVM": "ami-e82a1a8d"
      },
      "us-west-1": {
        "US1604HVM": "ami-493f2f29"
      },
      "us-west-2": {
        "US1604HVM": "ami-ca89eeb2"
      }
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::EachMemberIn": [
              {
                "Fn::ValueOfAll": [
                  "AWS::EC2::Subnet::Id",
                  "VpcId"
                ]
              },
              {
                "Fn::RefAll": "AWS::EC2::VPC::Id"
              }
            ]
          },
          "AssertDescription": "All subnets must exist in the VPC"
        }
      ]
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources": {
    "BlockChainSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "10000",
            "ToPort": "10000",
            "CidrIp": {
              "Ref": "BlockChainAccessCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ]
      }
    },
    "AdminPortal": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "cisco_install": [
              "docker_install"
            ]
          },
          "docker_install": {
            "commands": {
              "01_start_install": {
                "command": "echo \"start docker installation\""
              },
              "02_update_pkgs": {
                "command": "sudo apt-get update"
              },
              "03_install_pkgs": {
                "command": "sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common"
              },
              "04_install_gpg_key": {
                "command": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
              },
              "05_add_docker_repo": {
                "command": "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""
              },
              "06_update_pkgs": {
                "command": "sudo apt-get update"
              },
              "07_install_docker": {
                "command": "sudo apt-get install -y docker-ce docker-compose"
              },
              "08_docker_user_group": {
                "command": "sudo usermod -aG docker ubuntu"
              },
              "09_docker_service_restart": {
                "command": "sudo service docker restart"
              },
              "10_end_install": {
                "command": "echo \"done docker installation\""
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "US1604HVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BlockChainSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AdminPortal"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "function cfn_fail {",
                "\n",
                "cfn-signal -e 1 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource AdminPortal",
                "\nexit 1\n}",
                "\n",
                "function cfn_success {",
                "\n",
                "cfn-signal -e 0 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource AdminPortal",
                "\nexit 0\n}",
                "\n",
                "echo \"[Cloning: Load QuickStart Common Utils]\"\n",
                "\n",
                "#Once Repo is public (Use quickstart-linux-utilities submodue)\n",
                "git clone -b develop https://github.com/aws-quickstart/quickstart-linux-utilities.git\n",
                "source /quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                "\n",
                "echo \"[Loaded: Load QuickStart Common Utils]\"\n",
                "\n",
                "echo \"[Update Operating System]\"\n",
                "export QSSTACKNAME=${AWS::StackName}",
                "export QSREGION=${AWS::Region}",
                "qs_update-os || qs_error\n",
                "qs_bootstrap_pip\n",
                "qs_aws-cfn-bootstrap\n",
                "echo \"[INFO]: Bootstrapping Status = $(qs_status)\"\n",
                "cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource AdminPortal",
                " --configsets cisco_install",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "[ $(qs_status) == 0 ] && cfn_success || echo cfn_fail",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "Peer0": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "cisco_install": [
              "run_install"
            ]
          },
          "run_install": {
            "commands": {
              "start_install": {
                "command": "echo \"add install script here\""
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "US1604HVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BlockChainSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Peer0"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "function cfn_fail {",
                "\n",
                "cfn-signal -e 1 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer0",
                "\nexit 1\n}",
                "\n",
                "function cfn_success {",
                "\n",
                "cfn-signal -e 0 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer0",
                "\nexit 0\n}",
                "\n",
                "echo \"[Cloning: Load QuickStart Common Utils]\"\n",
                "\n",
                "#Once Repo is public (Use quickstart-linux-utilities submodue)\n",
                "git clone -b develop https://github.com/aws-quickstart/quickstart-linux-utilities.git\n",
                "source /quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                "\n",
                "echo \"[Loaded: Load QuickStart Common Utils]\"\n",
                "\n",
                "echo \"[Update Operating System]\"\n",
                "export QSSTACKNAME=${AWS::StackName}",
                "export QSREGION=${AWS::Region}",
                "qs_update-os || qs_error\n",
                "qs_bootstrap_pip\n",
                "qs_aws-cfn-bootstrap\n",
                "echo \"[INFO]: Bootstrapping Status = $(qs_status)\"\n",
                "cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource Peer0",
                " --configsets cisco_install",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "[ $(qs_status) == 0 ] && cfn_success || echo cfn_fail",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "Peer1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "cisco_install": [
              "run_install"
            ]
          },
          "run_install": {
            "commands": {
              "start_install": {
                "command": "echo \"add install script here\""
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "US1604HVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BlockChainSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Peer1"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "function cfn_fail {",
                "\n",
                "cfn-signal -e 1 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer1",
                "\nexit 1\n}",
                "\n",
                "function cfn_success {",
                "\n",
                "cfn-signal -e 0 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer1",
                "\nexit 0\n}",
                "\n",
                "echo \"[Cloning: Load QuickStart Common Utils]\"\n",
                "\n",
                "#Once Repo is public (Use quickstart-linux-utilities submodue)\n",
                "git clone -b develop https://github.com/aws-quickstart/quickstart-linux-utilities.git\n",
                "source /quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                "\n",
                "echo \"[Loaded: Load QuickStart Common Utils]\"\n",
                "\n",
                "echo \"[Update Operating System]\"\n",
                "export QSSTACKNAME=${AWS::StackName}",
                "export QSREGION=${AWS::Region}",
                "qs_update-os || qs_error\n",
                "qs_bootstrap_pip\n",
                "qs_aws-cfn-bootstrap\n",
                "echo \"[INFO]: Bootstrapping Status = $(qs_status)\"\n",
                "cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource Peer1",
                " --configsets cisco_install",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "[ $(qs_status) == 0 ] && cfn_success || echo cfn_fail",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "Peer2": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "cisco_install": [
              "run_install"
            ]
          },
          "run_install": {
            "commands": {
              "start_install": {
                "command": "echo \"add install script here\""
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "US1604HVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BlockChainSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Peer2"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "function cfn_fail {",
                "\n",
                "cfn-signal -e 1 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer2",
                "\nexit 1\n}",
                "\n",
                "function cfn_success {",
                "\n",
                "cfn-signal -e 0 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Peer2",
                "\nexit 0\n}",
                "\n",
                "echo \"[Cloning: Load QuickStart Common Utils]\"\n",
                "\n",
                "#Once Repo is public (Use quickstart-linux-utilities submodue)\n",
                "git clone -b develop https://github.com/aws-quickstart/quickstart-linux-utilities.git\n",
                "source /quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                "\n",
                "echo \"[Loaded: Load QuickStart Common Utils]\"\n",
                "\n",
                "echo \"[Update Operating System]\"\n",
                "export QSSTACKNAME=${AWS::StackName}",
                "export QSREGION=${AWS::Region}",
                "qs_update-os || qs_error\n",
                "qs_bootstrap_pip\n",
                "qs_aws-cfn-bootstrap\n",
                "echo \"[INFO]: Bootstrapping Status = $(qs_status)\"\n",
                "cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource Peer2",
                " --configsets cisco_install",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "[ $(qs_status) == 0 ] && cfn_success || echo cfn_fail",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "AdminPortalPublicDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "AdminPortal",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS Name for the AdminPortal Instance"
    },
    "AdminPortalPublicIPAddress": {
      "Value": {
        "Fn::Sub": "ubuntu@${AdminPortal.PublicIp}"
      },
      "Description": "Public IP address for the AdminPortal instance"
    },
    "Peer0PublicDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "Peer0",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS Name for the Peer0 Instance"
    },
    "Peer0PublicIPAddress": {
      "Value": {
        "Fn::Sub": "ubuntu@${Peer0.PublicIp}"
      },
      "Description": "Public IP address for the Peer0 instance"
    },
    "Peer1PublicDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "Peer1",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS Name for the Peer1 Instance"
    },
    "Peer1PublicIPAddress": {
      "Value": {
        "Fn::Sub": "ubuntu@${Peer1.PublicIp}"
      },
      "Description": "Public IP address for the Peer1 instance"
    },
    "Peer2PublicDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "Peer2",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS Name for the Peer2 Instance"
    },
    "Peer2PublicIPAddress": {
      "Value": {
        "Fn::Sub": "ubuntu@${Peer2.PublicIp}"
      },
      "Description": "Public IP address for the Peer2 instance"
    }
  }
}
